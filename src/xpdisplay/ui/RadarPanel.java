/*
 * Copyright (c) Duncan Jauncey 2013.   Free for non-commercial use.
 */

package xpdisplay.ui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import xpdisplay.model.StateChangeListener;
import xpdisplay.model.data.DataObject;
import xpdisplay.model.data.OtherAircraftPosition;
import xpdisplay.model.data.Position;
import xpdisplay.util.MathUtils;

/**
 *
 *
 */
public class RadarPanel extends javax.swing.JPanel implements StateChangeListener {
    private float ourLat;
    private float ourLong;
    private float ourAlt;
    
    private float[] otherLat = new float[8];
    private float[] otherLong = new float[8];
    private float[] otherAlt = new float[8];
    
    private boolean gotOurPosition = false;
    private boolean gotAnotherPosition = false;
    
    public RadarPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 433, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void notifyStateChanged(DataObject objectThatWasChanged) {
        if( objectThatWasChanged instanceof OtherAircraftPosition ) {
            OtherAircraftPosition p = (OtherAircraftPosition) objectThatWasChanged;
            if( p.getLatitude() != null && p.getLongitude() != null && p.getAltitudeInFeetAboveMeanSeaLevel() != null ) {
                otherLat[p.getIndex()] = p.getLatitude();
                otherLong[p.getIndex()] = p.getLongitude();
                otherAlt[p.getIndex()] = p.getAltitudeInFeetAboveMeanSeaLevel();
                gotAnotherPosition = true;
                repaint();
            }
        } else
        if( objectThatWasChanged instanceof Position ) {
            Position p = (Position) objectThatWasChanged;
            ourLat = p.getLatitude();
            ourLong = p.getLongitude();
            ourAlt = p.getAltitudeInFeetAboveMeanSeaLevel();
            gotOurPosition = true;
            repaint();
        }
    }
    
    private double getMaxDist() {
        double maxDist = 0.0f;
        Point2D.Double ourPos = MathUtils.convertToCartesian(ourLat, ourLong);
        for( int i=0; i<otherLat.length; i++ ) {
            Point2D.Double d = MathUtils.convertToCartesian(otherLat[i], otherLong[i]);
            double dx = ourPos.x - d.x;
            double dy = ourPos.y - d.y;
            double dist = Math.sqrt(dx * dx + dy * dy);
            if( dist > maxDist ) {
                maxDist = dist;
            }            
        }
        return maxDist;
    }
    
    public void paint(Graphics oldG) {
//        super.paint(oldG);        
        Graphics2D g = (Graphics2D) oldG;
        
        g.setColor(Color.GRAY);
        g.fillRect(0,0,getWidth(), getHeight());
        
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        
        g.setColor(Color.YELLOW);
        g.drawString("(experimental)", 30, 20);
        
        if( !gotOurPosition || !gotAnotherPosition ) {
            g.setColor(Color.WHITE);
            g.drawString("Awaiting Data..", 30, 42);
            return;
        }
        
        double maxDist = getMaxDist();
        double scaleFactor = ((double)getHeight()/2.0) / maxDist;
        
        g.translate(getWidth()/2, getHeight()/2);
        
//        g.setColor(Color.WHITE);
//        g.drawOval(-10,-10,20,20);
        
        // range markings
        g.setColor(Color.DARK_GRAY);        
        for(int i=100; i<(getHeight()/2); i+=100) {
            g.drawOval(-i,-i,i*2,i*2);
        }
        
        
        
        g.scale(scaleFactor, scaleFactor);
        
        Point2D.Double ourPos = MathUtils.convertToCartesian(ourLat, ourLong);
        
        for( int i=0; i<otherLat.length; i++ ) {
            
            Point2D.Double otherPos = MathUtils.convertToCartesian(otherLat[i], otherLong[i]);
            
            double dx = otherPos.x - ourPos.x;
            double dy = otherPos.y - ourPos.y;
            
            g.translate(dx,-dy);
            g.scale(1.0/scaleFactor, 1.0/scaleFactor);
            
            if( i > 0 ) {
                g.setColor(Color.WHITE);
                g.drawOval(-1,-1,2,2);
                g.drawOval(-8,-8,16,16);
            } else {
                g.setColor(Color.ORANGE);
                g.drawLine(-3,0,3,0);
                g.drawLine(0,-3,0,3);
            }
            
            
            g.setColor(Color.WHITE);
            if( i > 0 ) {
                g.drawString("#"+i, 12, 5);
            }
            
            if( i > 0 ) {
                int alt = (int)(otherAlt[i]) / 100;
                g.setColor(Color.LIGHT_GRAY);
                g.drawString("FL"+alt, 10, 20);

                int altDiff = (int)(otherAlt[i]-ourAlt);
                String diff = ""+(altDiff/100);
                if( altDiff > 0 ) {
                    diff = "+"+diff;                    
                }
                if( Math.abs(altDiff) < 5000 ) {
                    g.setColor(Color.CYAN);
                }
                if( Math.abs(altDiff) < 3000 ) {
                    g.setColor(Color.ORANGE);
                }
                g.drawString(diff, 16, 32);
            }
            
            g.scale(scaleFactor, scaleFactor);
            g.translate(-dx, +dy);
        }
        
        
        g.scale(1.0/scaleFactor, 1.0/scaleFactor);
        
        g.translate(-getWidth()/2, -getHeight()/2);
    }
    
}
